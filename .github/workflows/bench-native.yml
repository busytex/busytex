name: bench-native

on: 
  workflow_dispatch:
    inputs:
      busytexcosmoreleasetag:
        description: 'busytex cosmo release tag'
        required: false
        default: 'build_native_c88efc04ba7f3b04c8d0c32d646646a39791e689_8031878137_1'
      busytexnativereleasetag:
        description: 'busytex native release tag'
        required: false
        default: 'build_native_418c9bc5edfd99fdb560cff956d3f10d3e598bcf_6949768401_1'

env:
  BENCHSETURLS: https://github.com/busytex/busytex/releases/download/tectonicbenchset/arXiv_src_1702_001.tar

jobs:

  bench-native:
    runs-on: ubuntu-22.04
    steps:
      - name: Disable binfmt_misc shenanigans (https://github.com/jart/cosmopolitan/tree/master/tool/cosmocc#gotchas)
        run: |
             sudo wget -O /usr/bin/ape https://cosmo.zip/pub/cosmos/bin/ape-$(uname -m).elf
             sudo chmod +x /usr/bin/ape
             sudo sh -c "echo ':APE:M::MZqFpD::/usr/bin/ape:' >/proc/sys/fs/binfmt_misc/register"
             sudo sh -c "echo ':APE-jart:M::jartsr::/usr/bin/ape:' >/proc/sys/fs/binfmt_misc/register"

      - uses: actions/checkout@v4
      
      - name: Download native binaries
        run:  make URLRELEASE=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ github.event.inputs.busytexnativereleasetag }} download-native
      
      - name: Install native
        run: |
            make source/texmfrepo.txt
            make build/texlive-full.txt 
            make dist-native-full
            sh example/example.sh
            rm -rf source/texmfrepo

      - name: Download benchset
        run: | 
          wget ${{env.BENCHSETURLS}}
          mkdir -p ./benchset/tar
          # https://info.arxiv.org/help/bulk_data_s3.html#bulk-source-file-access
          tar -tvf arXiv_src_1702_001.tar &&  tar -xf arXiv_src_1702_001.tar --directory ./benchset/ #&& rm arXiv_src_1702_001.tar 
          for f in ./benchset/*/*.gz; do
            mkdir -p ./benchset/tar/$(basename $f)
            gzip -c -d $f > ./benchset/tar/$(basename $f)/$(basename $f).tex && rm $f
            tar -xf ./benchset/tar/$(basename $f)/$(basename $f).tex --directory=./benchset/tar/$(basename $f) && rm ./benchset/tar/$(basename $f)/$(basename $f).tex || true
          done
          cp -r benchset benchset_cosmo
          mv benchset benchset_native

      - name: Bench native
        run: |
            find ./benchset_native/tar/ -type d -mindepth 1 -maxdepth 1 -exec python busytexmk.py --tar ./arXiv_src_1702_001.tar --gz {} --driver xelatex --bibtex --DIST ./dist-native --busytex ./dist-native/busytex -i {} --log {}/busytexmk.log ';' > bench.log
            mkdir  OK FAIL
            grep   OK bench.log | while read dirname rest; do cp $dirname/busytexmk.log   OK/$(basename $dirname)_busytexmk.log; done
            grep FAIL bench.log | while read dirname rest; do cp $dirname/busytexmk.log FAIL/$(basename $dirname)_busytexmk.log; done
            echo TOTAL: $(wc -l bench.log) OK: $(grep OK bench.log | wc -l) FAIL: $(grep FAIL bench.log | wc -l)
      
      - name: Analyze logs native
        run: |
            python busytexmk.py | while read err; do echo $err : $(find ./benchset_native/tar/ -name busytexmk.log -exec grep -a "$err" {} ';' | wc -l); done
            find ./benchset_native/tar/ -name busytexmk.log -exec grep -a "LaTeX Error" {} ';' | sort
            find ./benchset_native/tar/ -name busytexmk.log -exec grep -a ":fatal:" {} ';' | sort
            find ./benchset_native/tar/ -name busytexmk.log -exec grep -a "Filtering file via command" {} ';' | sort
            find ./benchset_native/tar/ -name busytexmk.log -exec grep -a "kpathsea: Running" {} ';' | sort
     
      - name: Copy logs native
        run: mkdir -p native_logs/ && mv OK FAIL bench.log native_logs/

      #- name: Cleanup natvie
      #  run: rm -rf ./dist-native/ ./benchset_native/
      #
      #- name: Download cosmo binaries
      #  run:  make URLRELEASE=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ github.event.inputs.busytexcosmoreleasetag }} download-native
      #
      #- name: Install cosmo 
      #  run: make dist-native-full && sh example/example.sh
      #
      #- name: Bench cosmo
      #  run: |
      #      find ./benchset_cosmo/tar/ -type d -mindepth 1 -maxdepth 1 -exec python busytexmk.py --driver pdflatex --bibtex --DIST ./dist-native --busytex ./dist-native/busytex -i {} --log {}/busytexmk.log ';' > bench.log
      #      mkdir OK FAIL
      #      grep   OK bench.log | while read dirname rest; do cp $dirname/busytexmk.log   OK/$(basename $dirname)_busytexmk.log; done
      #      grep FAIL bench.log | while read dirname rest; do cp $dirname/busytexmk.log FAIL/$(basename $dirname)_busytexmk.log; done
      #      echo TOTAL: $(wc -l bench.log) OK: $(grep OK bench.log | wc -l) FAIL: $(grep FAIL bench.log | wc -l)

      #- name: Copy logs cosmo
      #  run: mkdir -p cosmo_logs/ && mv OK FAIL bench.log cosmo_logs/
      
      - name: Archive logs
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            native_logs/
            cosmo_logs/
